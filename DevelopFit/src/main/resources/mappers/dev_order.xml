<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dev.order">
	
	<resultMap type="orderDto" id="orderResultMap">
		<id column="MEMBER_NUMBER" property="memberNumber" />
		<result column="MEMBER_ID" property="memberId" />
		<result column="MEMBER_MONEY" property="memberMoney" />
		<result column="MOVIE_NUMBER" property="movieNumber" />
		<result column="MOVIE_TITLE" property="movieTitle" />
		<result column="MOVIE_SUMMARY" property="movieSummary" />
		<result column="MOVIE_RUNTIME" property="movieRuntime" />
		<result column="MOVIE_RELEASE_DATE" property="movieReleaseDate" />
		<result column="MOVIE_PRICE" property="moviePrice" />
		<result column="MOVIE_MAIN_POSTER" property="movieMainPoster" />
		<result column="ORDER_HISTORY_NUMBER" property="orderHistoryNumber" />
		<result column="ORDER_HISTORY_TIME" property="orderHistoryTime" />
		<result column="ORDER_HISTORY_STATE" property="orderHistoryState" />
	</resultMap>
	
	
<!-- 	장바구니 담기 -->
	<insert id="insertBasket" parameterType="map">
		INSERT INTO BASKET
		VALUE(BASKET_NO, MEMBER_NUMBER, MOVIE_NUMBER)
		VALUES(BASKET_NUMBER_SEQ.NEXTVAL, #{memberNumber}, #{movieNumber})
	</insert>
	
<!-- 	장바구니리스트 가져오기 -->
	<select id="selectBasketList" parameterType="int" resultMap="orderResultMap">
		SELECT MV.MOVIE_NUMBER, MV.MOVIE_TITLE, MV.MOVIE_PRICE, MV.MOVIE_MAIN_POSTER, MV.MOVIE_SUMMARY
			, MV.MOVIE_RUNTIME, MV.MOVIE_RELEASE_DATE
		FROM MEMBER M JOIN BASKET B
		ON M.MEMBER_NUMBER = B.MEMBER_NUMBER
		JOIN MOVIE MV
		ON B.MOVIE_NUMBER = MV.MOVIE_NUMBER
		WHERE M.MEMBER_NUMBER = #{memberNumber}
	</select>
	
	
<!-- 	선택제품 가져오기 -->
	<select id="selectProduct" parameterType="int" resultMap="orderResultMap">
		SELECT MV.MOVIE_NUMBER, MV.MOVIE_TITLE, MV.MOVIE_PRICE, MV.MOVIE_MAIN_POSTER, MV.MOVIE_SUMMARY
			, MV.MOVIE_RUNTIME, MV.MOVIE_RELEASE_DATE
		FROM MOVIE MV
		WHERE MV.MOVIE_NUMBER = #{movieNumber}
	</select>
	
	
<!-- 	제품 삭제하기 -->
	<delete id="deleteBasket" parameterType="int">
		DELETE FROM BASKET
		WHERE MOVIE_NUMBER = #{movieNumber}
	</delete>
	
	
<!-- 	주문내역 저장하기 -->
	<insert id="insertOrderHistory" parameterType="orderDto">
		INSERT INTO ORDER_HISTORY
		VALUE(ORDER_HISTORY_NUMBER, ORDER_HISTORY_TIME, ORDER_HISTORY_STATE, MEMBER_NUMBER)
		VALUES(#{orderHistoryNumber}, SYSDATE, 'N', #{memberNumber})
	</insert>
<!-- 	해당 주문내역에 상품저장하기 -->
	<insert id="insertOrderProduct" parameterType="orderDto">
		INSERT INTO ORDER_PRODUCT
		VALUE(ORDER_PRODUCT_NUMBER, ORDER_HISTORY_NUMBER, MOVIE_NUMBER)
		VALUES(ORDER_PRODUCT_NUMBER_SEQ.NEXTVAL, #{orderHistoryNumber}, #{movieNumber})
	</insert>
	
	
<!-- 	주문내역 갯수 -->
	<select id="selectOrderHistoryTotalCount" parameterType="java.lang.Integer" resultType="int">
		SELECT COUNT(ORDER_HISTORY_NUMBER)
		FROM ORDER_HISTORY
		<if test="value != null">
			WHERE MEMBER_NUMBER = #{memberNumber}
		</if>
	</select>
	
	
<!-- 	주문내역 가져오기 -->
	<select id="selectOrderHistory" parameterType="orderDto" resultMap="orderResultMap">
		SELECT MV.MOVIE_NUMBER, MV.MOVIE_TITLE, MV.MOVIE_PRICE, MV.MOVIE_MAIN_POSTER, MV.MOVIE_SUMMARY
			, MV.MOVIE_RUNTIME, MV.MOVIE_RELEASE_DATE, OH.ORDER_HISTORY_TIME, OH.ORDER_HISTORY_NUMBER
		FROM MEMBER M JOIN ORDER_HISTORY OH
		ON M.MEMBER_NUMBER = OH.MEMBER_NUMBER
		JOIN ORDER_PRODUCT OP
		ON OP.ORDER_HISTORY_NUMBER = OH.ORDER_HISTORY_NUMBER
		JOIN MOVIE MV
		ON OP.MOVIE_NUMBER = MV.MOVIE_NUMBER
		<if test="memberNumber != null">
			WHERE M.MEMBER_NUMBER = #{memberNumber} AND
		</if>
		OH.ORDER_HISTORY_NUMBER = #{orderHistoryNumber}
	</select>
	
<!-- 	주문번호 가져오기 -->
	<select id="selectOrderHistoryNumber" parameterType="map" resultType="int">
<!-- 		select distinct(oh.order_history_number) -->
<!-- 		from order_history oh join order_product op -->
<!-- 		on oh.order_history_number = op.order_history_number -->
<!-- 		join member m -->
<!-- 		on m.member_number = oh.member_number -->
<!-- 		where m.member_number = #{memberNumber} -->

		SELECT ORDER_HISTORY_NUMBER
		FROM (  SELECT ROWNUM RN, ORDER_HISTORY_NUMBER
		        FROM (  SELECT DISTINCT(OH.ORDER_HISTORY_NUMBER)
		                FROM ORDER_HISTORY OH JOIN ORDER_PRODUCT OP
		                ON OH.ORDER_HISTORY_NUMBER = OP.ORDER_HISTORY_NUMBER
		                JOIN MEMBER M
		                ON M.MEMBER_NUMBER = OH.MEMBER_NUMBER
		                <if test="memberNumber != null">
		                	WHERE M.MEMBER_NUMBER = #{memberNumber}
		                </if>
		                ORDER BY ORDER_HISTORY_NUMBER DESC))
		WHERE RN BETWEEN #{start} AND #{end}
	</select>
	
	
<!-- 	전체 주문내역 가져오기 -->
	<select id="selectAllOrderHistoryList" parameterType="map" resultMap="orderResultMap">
		SELECT MV.MOVIE_NUMBER, MV.MOVIE_TITLE, MV.MOVIE_PRICE, MV.MOVIE_MAIN_POSTER, MV.MOVIE_SUMMARY
			, MV.MOVIE_RUNTIME, MV.MOVIE_RELEASE_DATE, OH.ORDER_HISTORY_TIME, OH.ORDER_HISTORY_NUMBER, OH.ORDER_HISTORY_STATE
			, M.MEMBER_NUMBER, M.MEMBER_ID
		FROM MEMBER M JOIN ORDER_HISTORY OH
		ON M.MEMBER_NUMBER = OH.MEMBER_NUMBER
		JOIN ORDER_PRODUCT OP
		ON OP.ORDER_HISTORY_NUMBER = OH.ORDER_HISTORY_NUMBER
		JOIN MOVIE MV
		ON OP.MOVIE_NUMBER = MV.MOVIE_NUMBER
		WHERE OH.ORDER_HISTORY_NUMBER = #{orderHistoryNumber}
		<if test="memberNumber != null">
			AND M.MEMBER_NUMBER = #{memberNumber} 
		</if>
		
	</select>
	
	
<!-- 	유저 머니 갱신 -->
	<update id="updateMemberMoney" parameterType="map">
		UPDATE MEMBER
		SET MEMBER_MONEY = #{memberMoney}
		WHERE MEMBER_NUMBER = #{memberNumber}
	</update>
	
	
<!-- 	영화 가격 가져오기 -->
	<select id="selectMoviePrice" parameterType="int" resultType="int">
		SELECT M.MOVIE_PRICE
		FROM MOVIE M
		WHERE M.MOVIE_NUMBER = #{movieNumber}
	</select>
	
	
<!-- 	주문 상태 변경 -->
	<update id="updateOrderHistoryState" parameterType="int">
		UPDATE ORDER_HISTORY
		SET ORDER_HISTORY_STATE = 'R'
		WHERE ORDER_HISTORY_NUMBER = #{orderHistoryNumber}
	</update>
</mapper>