<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dev.board">

	<resultMap type="boardDto" id="boardResultMap">
	
<!-- 		게시판관련 -->
		<id column="BOARD_NUMBER" property="boardNumber" />
		<result column="BOARD_TITLE" property="boardTitle" />
		<result column="BOARD_CONTENT" property="boardContent" />
		<result column="BOARD_CREATE_DATE" property="boardCreateDate" 
		javaType="java.util.Date" />
		<result column="BOARD_HIT" property="boardHit" />
		
<!-- 		맴버관련(+ id컬럼인 보드넘은 공통) -->
		<result column="MEMBER_ID" property="memberId" />
		<result column="MEMBER_NUMBER" property="memberNumber" />
		
	</resultMap>
	
<!-- 	게시글 리스트 = 게시판 -->
	<select id="boardSelectList" parameterType="map" resultMap="boardResultMap">
		SELECT C.BOARD_NUMBER, C.BOARD_TITLE, C.BOARD_CONTENT, C.MEMBER_ID, 
		C.BOARD_CREATE_DATE, C.BOARD_HIT, C.MEMBER_NUMBER
		FROM(
		SELECT ROWNUM AS RNUM, C.BOARD_NUMBER, C.BOARD_TITLE, C.BOARD_CONTENT, 
		C.MEMBER_ID, C.BOARD_CREATE_DATE, C.BOARD_HIT, C.MEMBER_NUMBER
		FROM(
		SELECT B.BOARD_NUMBER, B.BOARD_TITLE, B.BOARD_CONTENT, M.MEMBER_ID, 
		B.BOARD_CREATE_DATE, B.BOARD_HIT, M.MEMBER_NUMBER
		FROM MEMBER M JOIN BOARD B ON M.MEMBER_NUMBER = B.MEMBER_NUMBER
		ORDER BY BOARD_NUMBER DESC) C
		) C
		WHERE C.RNUM BETWEEN #{start} AND #{end}
		ORDER BY C.BOARD_NUMBER DESC
		
	</select>
	
	<!-- 	게시글 상세페이지 -->
<!-- 여기서 멤버넘버도 셀랙해서 게시판 상세페이지에 멤버넘버를 가지고 있음 -->
<!-- 수정버튼 누르면 상세페이지jsp폼에서 히든으로(화면에 안보이는) 가지고 있던 멤버 넘버를  -->
<!-- 업데이트 폼으로 다른 정보와 같이보냄 > 수정버튼 누르면 업데이트 ctr 하면서 -->
<!-- slq(아래 boardUpdateOne)로 멤버정보 보내서 검증 수행  -->
	<select id="boardSelectOne" parameterType="map" resultMap="boardResultMap">
		SELECT B.BOARD_NUMBER, M.MEMBER_ID, B.BOARD_TITLE, B.BOARD_CONTENT,
        B.BOARD_CREATE_DATE, B.BOARD_HIT, M.MEMBER_NUMBER
		FROM MEMBER M JOIN BOARD B
		ON M.MEMBER_NUMBER = B.MEMBER_NUMBER
		WHERE B.BOARD_NUMBER = #{boardNumber}
	</select>
	
<!-- 	조회수 증가 -->
	<update id="viewCount" parameterType="int">
		UPDATE BOARD
		<set>
			BOARD_HIT = BOARD_HIT + 1
		</set>
		WHERE BOARD_NUMBER = #{boardNumber}
	</update>
    
<!--     <select id="commentSelectList" parameterType="map" resultMap="boardResultMap">	 -->
<!-- 		SELECT D.RN, D.BOARD_NUMBER, D.MEMBER_ID, D.POST_COMMENT_CONTENT, D.POST_COMMENT_DATE  -->
<!-- 		FROM ( SELECT ROWNUM AS RN, PRN.BOARD_NUMBER, PRN.MEMBER_ID, PRN.POST_COMMENT_CONTENT, PRN.POST_COMMENT_DATE  -->
<!-- 		FROM ( SELECT B.BOARD_NUMBER, M.MEMBER_ID, PC.POST_COMMENT_CONTENT, PC.POST_COMMENT_DATE  -->
<!-- 		FROM BOARD B JOIN POST_COMMENT PC  -->
<!-- 		ON B.BOARD_NUMBER = PC.BOARD_NUMBER -->
<!-- 		JOIN MEMBER M -->
<!-- 		ON PC.MEMBER_NUMBER = M.MEMBER_NUMBER  -->
<!-- 		ORDER BY PC.POST_COMMENT_DATE) PRN) D  -->
<!-- 		WHERE D.RN BETWEEN #{start} AND #{end} -->
<!-- 		AND D.BOARD_NUMBER = #{boardNumber} -->
<!-- 	</select> -->
	
<!-- 	게시글 생성 -->
	<insert id="boardInsertOne" parameterType="boardDto"
		useGeneratedKeys="true" keyProperty="boardNumber">
		<selectKey keyProperty="boardNumber" resultType="int" order="BEFORE">
			SELECT BOARD_NUMBER_SEQ.NEXTVAL
			FROM DUAL
		</selectKey>
		
		INSERT INTO BOARD
			(BOARD_NUMBER, BOARD_TITLE, BOARD_CONTENT, BOARD_CREATE_DATE, MEMBER_NUMBER)
		VALUES(#{boardNumber}, #{boardTitle}, #{boardContent}, SYSDATE, #{memberNumber})
	</insert>
	
	
<!-- 	게시글 내용 업데이트 (제목, 내용) -->
	<update id="boardUpdateOne" parameterType="boardDto">
		UPDATE BOARD
 		<set>
 			<if test="boardTitle != null">BOARD_TITLE = #{boardTitle},</if>
 			<if test="boardContent != null">BOARD_CONTENT = #{boardContent}</if>
 		</set>
 		WHERE MEMBER_NUMBER = #{memberNumber}
		AND BOARD_NUMBER = #{boardNumber}
		
	</update>
		
<!-- 	게시글 내용 삭제 -->
	<delete id="boardDeleteOne" parameterType="int">
		DELETE FROM BOARD
		WHERE BOARD_NUMBER = #{boardNumber}
		AND MEMBER_NUMBER = #{memberNumber}
	</delete>
	
<!-- 	페이징 기능을 위한 총 게시글 수 산출 -->
	<select id="boardSelectTotalCount" resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM BOARD
	</select>
	
<!-- 	댓글 생성 -->
<!-- 	<insert id="boardCommentInsertOne" parameterType="boardDto" -->
<!-- 		useGeneratedKeys="true" keyProperty="commentNumber"> -->
<!-- 		<selectKey keyProperty="commentNumber" resultType="int" order="BEFORE"> -->
<!-- 			SELECT POST_COMMENT_NUMBER_SEQ.NEXTVAL -->
<!-- 			FROM DUAL -->
<!-- 		</selectKey> -->
		
<!-- 		INSERT INTO POST_COMMENT -->
<!-- 			(POST_COMMENT_NUMBER, POST_COMMENT_CONTENT, POST_COMMENT_DATE,  -->
<!-- 			BOARD_NUMBER, MEMBER_NUMBER) -->
<!-- 		VALUES(#{commentNumber}, #{commentContent}, SYSDATE,  -->
<!-- 		#{boardNumber}, #{memberNumber}) -->
<!-- 	</insert> -->
	
	
 <!-- 	댓글 내용 업데이트 -->
<!-- 	<update id="boardCommentUpdateOne" parameterType="boardDto"> -->
<!-- 		UPDATE POST_COMMENT -->
<!--  		<set> -->
<!--  			<if test="commentContent != null">POST_COMMENT_CONTENT = #{commentContent}</if> -->
<!--  		</set> -->
<!--  		WHERE BOARD_NUMBER = #{boardNumber} -->
<!-- 		AND MEMBER_NUMBER = #{memberNumber} -->
<!-- 		AND POST_COMMENT_NUMBER = #{commentNumber} -->
<!-- 	</update> -->
		
<!-- 	댓글 내용 삭제 -->
<!-- 	<delete id="boardCommentDeleteOne" parameterType="int"> -->
<!-- 		DELETE FROM POST_COMMENT -->
<!-- 		WHERE BOARD_NUMBER = #{boardNumber} -->
<!-- 		AND MEMBER_NUMBER = #{memberNumber} -->
<!-- 		AND POST_COMMENT_NUMBER = #{commentNumber} -->
<!-- 	</delete> -->
	
<!-- 	페이징 기능을 위한 총 댓글 수 산출 -->
<!-- 	<select id="boardCommentSelectTotalCount" resultType="java.lang.Integer"> -->
<!-- 		SELECT COUNT(*) -->
<!-- 		FROM POST_COMMENT -->
<!-- 	</select> -->


</mapper>


